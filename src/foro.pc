
#include <stdlib.h>
#include <stdio.h>
#include <sqlca.h>
#include <errno.h>

#define SI_ESADMIN 'S'
#define NO_ESADMIN 'N'

int menu_principal();
void entrar();
void registro();

void login_bd();
void logout_bd();
void gestion_error_sql();

void listar_foros();
void crear_foro();
void editar_foro(int id_foro);
void borrar_foro(int id_foro);

void listar_hilos(int id_foro);
void borrar_hilo(int id_hilo);
void crear_hilo(int id_foro);
void editar_hilo(int id_hilo);

void listar_entradas(int id_hilo);
void crear_entrada(int id_hilo);

void ver_entrada(int id_entrada);
void borrar_entrada(int id_entrada);
void editar_entrada(int id_entrada);

void do_nothing(){}

int id_usuario;
char esadmin_usuario;
char nick_usuario [20];

// ------------------
// --- UTILIDADES ---
// ------------------

void leer_campo(char *texto, int longitud) {
	int i = 0;
	char letra;
	scanf("%s2000[^\n]", texto);
	while (1) {
		letra = texto[i];
		if (letra == '\0' || letra == '\n') {
			texto[i] = '\0';
			break;
		}
		i++;
	}
}

void esperar_tecla()
{
	printf("Pulsa cualquier tecla para continuar.\n");
	int fd;
	void *buf;
	read(fd, buf, 1);
}

void imprimir_error_sql()
{
	printf("Error (%d) %s", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
}

void gestion_error(int *ha_fallado)
{
	ha_fallado[0] = 1;
	imprimir_error_sql();
	esperar_tecla();
}

// ------------
// --- MAIN ---
// ------------

int main()
{
	int op;

	login_bd();
	while ( (op=menu_principal()) != 0) {
		switch(op){
			case 1: entrar(); break;
			case 2: registro(); break;
		}
	}

	logout_bd();
	return 0;
}

int menu_principal()
{
	int opcion = -1;

	printf("\n");
	printf("  Menú principal\n");
	printf("==================\n");
	printf("\n");
	printf("1. Entrar\n");
	printf("2. Registrarse\n");
	printf("0. Salir\n");

	while ((opcion < 0) || (opcion > 2)) {
		printf("\n");
		printf("Opción: ");
		scanf("%d", &opcion);
	}
	return opcion;
}

// --------------
// --- ENTRAR ---
// --------------

int error_al_entrar;
void gestion_error_entrar() {
	error_al_entrar = 1;
	imprimir_error_sql();
	esperar_tecla();
}

void entrar()
{
	char pass_usuario[32];

	printf("\n");
	printf("Nombre de usuario: ");
	scanf("%s", nick_usuario);
	printf("Contraseña: ");
	scanf("%s", pass_usuario);

	error_al_entrar = 0;
	id_usuario = -1;
	EXEC SQL WHENEVER SQLERROR DO gestion_error_entrar();
	EXEC SQL SELECT id, esadmin
		INTO :id_usuario, :esadmin_usuario
		FROM usuario
		WHERE nick=:nick_usuario AND pass=:pass_usuario;

	if (!error_al_entrar) {
		if (id_usuario < 0) {
			printf("\nUsuario y/o contraseña no válidos.\n");
		}
		else {
			listar_foros();
		}
	}
}

// ----------------
// --- REGISTRO ---
// ----------------

void registro()
{
	char nick[20];
	char pass[32];
	char email[45];
	int ha_fallado = 0;

	int id_usuario_obtenido;
	do {
		printf("\n");
		printf("Nombre de usuario: ");
		leer_campo(nick, 20);
	
		id_usuario_obtenido = -1;
		ha_fallado = 0;
		EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
		EXEC SQL SELECT id
			INTO :id_usuario_obtenido
			FROM usuario
			WHERE nick=:nick;
		if (ha_fallado) break;
		
		if (id_usuario_obtenido < 0) {
			printf("Contraseña: ");
			leer_campo(pass, 32);
			printf("Email: ");
			leer_campo(email, 45);
	
			ha_fallado = 0;
			EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
			EXEC SQL INSERT INTO usuario
				(id, nick, pass, email, fecharegistro)
				VALUES(usuario_seq.NEXTVAL, :nick, :pass, :email,
					(SELECT sysdate FROM dual));
			EXEC SQL COMMIT;
			if (ha_fallado) break;
	
			printf("\nUsuario registrado con éxito.\n");
			esperar_tecla();
			break;
		}
		
		printf("El nick introducido ya está en uso.");
	}
	while (1);
}

// --------------------
// --- LISTAR FOROS ---
// --------------------

int menu_listar_foros()
{
 	int opcion = -1;
 	int id_foro;

	while ((opcion < 0) || (opcion > 3)) {
	
		printf("\n");
		printf("1. Entrar en foro\n");
		printf("2. Crear foro\n");
		printf("3. Refrescar vista\n");
		printf("0. Volver atrás\n");
		printf("\n");
		printf("Opción: ");
		scanf("%d", &opcion);

		switch (opcion) {
			case 1:
			 	printf ("Numero del foro: ");
				scanf("%d", &id_foro);			 	
				listar_hilos(id_foro); 
				break;
			case 2: crear_foro(); break;
		}
	}
	return opcion;
}

void listar_foros()
{
	int id;
	char fechacreacion[11];
	char nombre[45];
	int ha_fallado;
	
	do {
		EXEC SQL DECLARE foros CURSOR FOR
			SELECT id, fechacreacion, nombre
			FROM foro;
		EXEC SQL OPEN foros;
		EXEC SQL WHENEVER NOT FOUND DO break;
	
		printf("\n");
		ha_fallado = 0;
		EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
		while(1) {
			EXEC SQL FETCH foros INTO :id, :fechacreacion, :nombre;
			if (ha_fallado) return;
			printf(" Foro %5d | %45s | creado el %11s\n",
					id, nombre, fechacreacion);
		}
	}
	while (menu_listar_foros() > 0);
}

// -------------------
// --- BORRAR FORO ---
// -------------------

void borrar_foro(int id_foro)
{
	int ha_fallado = 0;
	EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
	EXEC SQL WHENEVER NOT FOUND DO do_nothing();
	EXEC SQL DELETE FROM foro
		WHERE id=:id_foro;
	EXEC SQL COMMIT;
	if (ha_fallado) return;
	
	printf("\nForo borrado con éxito.\n");
	esperar_tecla();
}

// -------------------------
// --- CREAR/EDITAR FORO ---
// -------------------------

void crear_foro()
{
	char nombre[45];
	printf("\n");
	printf("Nombre: ");
	fgets(nombre, 45*sizeof(char), stdin);
	fgets(nombre, 45*sizeof(char), stdin);
	
	int ha_fallado = 0;
	EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
	EXEC SQL INSERT INTO foro
		(id, nombre, idusuario, fechacreacion)
		VALUES(foro_seq.NEXTVAL, :nombre, :id_usuario,
			(SELECT sysdate FROM dual));
	EXEC SQL COMMIT;
	if (ha_fallado) return;
	
	printf("\nForo creado con éxito.\n");
	esperar_tecla();
}

void editar_foro(int id_foro)
{
	char nombre[45];
	printf("\n");
	printf("Nombre: ");
	fgets(nombre, 45*sizeof(char), stdin);
	fgets(nombre, 45*sizeof(char), stdin);
	
	int ha_fallado = 0;
	EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
	EXEC SQL UPDATE foro
		SET nombre = :nombre
		WHERE id = :id_foro;
	EXEC SQL COMMIT;
	if (ha_fallado) return;
	
	printf("\nForo editado con éxito.\n");
	esperar_tecla();
}

// --------------------
// --- LISTAR HILOS ---
// --------------------

int menu_listar_hilos(int id_foro)
{
 	int opcion = -1;
	int id_hilo;
	int id_foro_obtenido = -1;
	int es_autor_o_admin = 0;
	
	if (esadmin_usuario == SI_ESADMIN) {
		es_autor_o_admin = 1;
	}
	else {
		int ha_fallado = 0;
		EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
		EXEC SQL WHENEVER NOT FOUND DO do_nothing();
		EXEC SQL SELECT id
			INTO :id_foro_obtenido
			FROM foro
			WHERE id=:id_foro AND idusuario=:id_usuario;
		if (ha_fallado) return;
		if (id_foro_obtenido>0) es_autor_o_admin = 1;
	}
	
	int num_opciones = (es_autor_o_admin) ? 5 : 3;
	
	while ((opcion < 0) || (opcion > num_opciones)) {

		printf("\n");
		printf("1. Entrar en hilo\n");
		printf("2. Crear hilo\n");
		printf("3. Refrescar vista\n");
		if (es_autor_o_admin) {
			printf("4. Borrar foro\n");
			printf("5. Editar foro\n");
		}
		printf("0. Volver atrás\n");
		printf("\n");
		printf("Opción: ");
		scanf("%d", &opcion);

		switch (opcion) {
			case 1:
			 	printf ("Numero del hilo: ");
				scanf("%d", &id_hilo);			 	
				listar_entradas(id_hilo); 
				break;
			case 2: crear_hilo(id_foro); break;
			case 4:
				if (es_autor_o_admin) borrar_foro(id_foro);
				opcion = 0;
				break;
			case 5:
				if (es_autor_o_admin) editar_foro(id_foro);
				break;
		}
	}
	return opcion;
}

void listar_hilos(int id_foro) 
{
	int id_foro_obtenido = -1;
	char fechacreacion_foro[11];
	char nombre_foro[45];
		
	int id_hilo;
	char fechacreacion_hilo[11];
	char titulo_hilo[45];
	
	int ha_fallado = 0;
	
	do
	{
		ha_fallado = 0;
		EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
		EXEC SQL WHENEVER NOT FOUND DO do_nothing();
		EXEC SQL SELECT id, fechacreacion, nombre
			INTO :id_foro_obtenido, :fechacreacion_foro, :nombre_foro
			FROM foro
			WHERE id=:id_foro;
		if (ha_fallado) return;
	
		if (id_foro_obtenido < 0) {
			printf("\nNúmero de foro no válido.\n");
			esperar_tecla();
			return;
		}
	
		printf("\n");
		printf(" Foro %5d | %45s | creado el %11s\n",
				id_foro, nombre_foro, fechacreacion_foro);
		printf(" ========================================");
		printf("========================================\n");
	
		EXEC SQL DECLARE hilos CURSOR FOR
			SELECT id, fechacreacion, titulo
			FROM hilo
			WHERE idforo=:id_foro;
		EXEC SQL OPEN hilos;
		EXEC SQL WHENEVER NOT FOUND DO break;
	
		ha_fallado = 0;
		EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
		while(1){
			EXEC SQL FETCH hilos INTO :id_hilo, :fechacreacion_hilo, :titulo_hilo;
			if (ha_fallado) return;
			printf(" Hilo %5d | %45s | creado el %11s\n",
					id_hilo, titulo_hilo, fechacreacion_hilo);
		}
	}
	while (menu_listar_hilos(id_foro) > 0);
}

// -------------------
// --- BORRAR HILO ---
// -------------------

void borrar_hilo(int id_hilo)
{
	int ha_fallado = 0;
	EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
	EXEC SQL WHENEVER NOT FOUND DO do_nothing();
	EXEC SQL DELETE FROM hilo
		WHERE id=:id_hilo;
	EXEC SQL COMMIT;
	if (ha_fallado) return;
	
	printf("\nHilo borrado con éxito.\n");
	esperar_tecla();
}

// -------------------------
// --- CREAR/EDITAR HILO ---
// -------------------------

void crear_hilo(int id_foro)
{
	char titulo[45];
	printf("\n");
	printf("Titulo: ");
	fgets(titulo, 45*sizeof(char), stdin);
	fgets(titulo, 45*sizeof(char), stdin);
	
	int ha_fallado = 0;
	EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
	EXEC SQL INSERT INTO hilo
		(id, titulo, idforo, idusuario, fechacreacion)
		VALUES(hilo_seq.NEXTVAL, :titulo, :id_foro,
		:id_usuario, (SELECT sysdate FROM dual));
	EXEC SQL COMMIT;
	if (ha_fallado) return;
	
	printf("\nHilo creado con éxito.\n");
	esperar_tecla();
}

void editar_hilo(int id_hilo)
{
	char titulo[45];
	printf("\n");
	printf("Titulo: ");
	leer_campo(titulo, 45);
	
	int ha_fallado = 0;
	EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
	EXEC SQL UPDATE hilo
		SET titulo = :titulo
		WHERE id = :id_hilo;
	EXEC SQL COMMIT;
	if (ha_fallado) return;
	
	printf("\nHilo editado con éxito.\n");
	esperar_tecla();
}

// -----------------------
// --- LISTAR ENTRADAS ---
// -----------------------

int menu_listar_entradas(int id_hilo)
{
 	int opcion = -1;
	int id_entrada;
	int id_hilo_obtenido = -1;
	int es_autor_o_admin = 0;
	
	if (esadmin_usuario == SI_ESADMIN) {
		es_autor_o_admin = 1;
	}
	else {
		int ha_fallado = 0;
		EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
		EXEC SQL WHENEVER NOT FOUND DO do_nothing();
		EXEC SQL SELECT id
			INTO :id_hilo_obtenido
			FROM hilo
			WHERE id=:id_hilo AND idusuario=:id_usuario;
		if (ha_fallado) return;
		if (id_hilo_obtenido>0) es_autor_o_admin = 1;
	}
	
	int num_opciones = (es_autor_o_admin) ? 5 : 3;
	
	while ((opcion < 0) || (opcion > num_opciones)) {

		printf("\n");
		printf("1. Ver entrada\n");
		printf("2. Responder al hilo\n");
		printf("3. Refrescar vista\n");
		
		if (es_autor_o_admin) {
			printf("4. Borrar hilo\n");
			printf("5. Editar hilo\n");
		}
		
		printf("0. Volver atrás\n");
		printf("\n");
		printf("Opción: ");
		scanf("%d", &opcion);

		switch (opcion) {
			case 1:
			 	printf ("Numero de la entrada: ");
				scanf("%d", &id_entrada);			 	
				ver_entrada(id_entrada); 
				break;
			case 2: crear_entrada(id_hilo); break;
			case 4:
				if (es_autor_o_admin) borrar_hilo(id_hilo);
				opcion = 0;
				break;
			case 5:
				if (es_autor_o_admin) editar_hilo(id_hilo);
				break;
		}
	}
	return opcion;
}

void listar_entradas(int id_hilo)
{
	int id_hilo_obtenido = -1;
	char fechacreacion_hilo[11];
	char titulo_hilo[45];
		
	int id_entrada;
	char fechacreacion_entrada[11];
	char titulo_entrada[45];
	char texto_entrada[1000];
	char nick_usuario_entrada[20];
	
	int ha_fallado;
	
	do
	{
		ha_fallado = 0;
		EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
		EXEC SQL WHENEVER NOT FOUND DO do_nothing();
		EXEC SQL SELECT hilo.id, hilo.fechacreacion, hilo.titulo, usuario.nick
			INTO :id_hilo_obtenido, :fechacreacion_hilo, :titulo_hilo, 
				 :nick_usuario_entrada
			FROM hilo JOIN usuario
			ON hilo.idusuario = usuario.id
			WHERE hilo.id = :id_hilo;
		if (ha_fallado) return;
	
		if (id_hilo_obtenido < 0) {
			printf("\nNúmero de hilo no válido.\n");
			esperar_tecla();
			return;
		}
	
		printf("\n");
		printf(" Hilo %5d | %45s | creado el %11s\n",
				id_hilo, titulo_hilo, fechacreacion_hilo);
		printf(" ========================================");
		printf("========================================\n\n");
	
		EXEC SQL DECLARE entradas CURSOR FOR
			SELECT id, fechacreacion, titulo, texto
			FROM entrada
			WHERE idhilo=:id_hilo;
		EXEC SQL OPEN entradas;
		EXEC SQL WHENEVER NOT FOUND DO break;
	
		ha_fallado = 0;
		EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
		while(1){
			EXEC SQL FETCH entradas
			INTO :id_entrada, :fechacreacion_entrada,
			     :titulo_entrada, :texto_entrada;
			if (ha_fallado) return;
			printf(" ----------------------------------------");
			printf("----------------------------------------\n");
			printf(" Post %5d | %45s | creado el %11s\n",
					id_entrada, titulo_entrada, fechacreacion_entrada);
			printf(" Autor %s\n", nick_usuario_entrada);
			printf(" ----------------------------------------");
			printf("----------------------------------------\n");
			printf(" %s\n", texto_entrada);
		}
	}
	while (menu_listar_entradas(id_hilo) > 0);
}

// -------------------
// --- VER ENTRADA ---
// -------------------

int menu_ver_entrada(int id_entrada)
{
 	int opcion = -1;
	int id_entrada_obtenido = -1;
	int es_autor_o_admin = 0;
	
	if (esadmin_usuario == SI_ESADMIN) {
		es_autor_o_admin = 1;
	}
	else {
		int ha_fallado = 0;
		EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
		EXEC SQL WHENEVER NOT FOUND DO do_nothing();
		EXEC SQL SELECT id
			INTO :id_entrada_obtenido
			FROM entrada
			WHERE id=:id_entrada AND idusuario=:id_usuario;
		if (id_entrada_obtenido>0) es_autor_o_admin = 1;
		if (ha_fallado) return;
	}
	
	int num_opciones = (es_autor_o_admin) ? 3 : 1;
	
	while ((opcion < 0) || (opcion > num_opciones)) {

		printf("\n");
		printf("1. Refrescar vista\n");
		if (es_autor_o_admin) {
			printf("2. Borrar entrada\n");
			printf("3. Editar entrada\n");
		}
		printf("0. Volver atrás\n");
		printf("\n");
		printf("Opción: ");
		scanf("%d", &opcion);

		if (es_autor_o_admin) {
			switch (opcion) {
				case 2:
					borrar_entrada(id_entrada);
					opcion = 0;
					break;
				case 3:
					editar_entrada(id_entrada); break;
			}
		}
	}
	return opcion;
}

void ver_entrada(int id_entrada)
{
	int id_entrada_obtenido = -1;
	char fechacreacion_entrada[11];
	char titulo_entrada[45];
	char texto_entrada[1000];
	
	int ha_fallado = 0;
	EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
	EXEC SQL WHENEVER NOT FOUND DO do_nothing();
	EXEC SQL SELECT id, fechacreacion, titulo, texto
		INTO :id_entrada_obtenido, :fechacreacion_entrada, :titulo_entrada,
		     :texto_entrada
		FROM entrada
		WHERE id=:id_entrada;
	if (ha_fallado) return;
	
	if (id_entrada_obtenido < 0) {
		printf("\nNúmero de entrada no válido.\n");
		esperar_tecla();
		return;
	}
	
	do {
		printf("\n");
		printf(" Post %5d | %45s | creado el %11s\n",
				id_entrada, titulo_entrada, fechacreacion_entrada);
		printf(" ----------------------------------------");
		printf("----------------------------------------\n");
		printf("%s\n", texto_entrada);
	}
	while (menu_ver_entrada(id_entrada) > 0);
}

// ----------------------
// --- BORRAR ENTRADA ---
// ----------------------

void borrar_entrada(int id_entrada)
{
	int ha_fallado = 0;
	EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
	EXEC SQL WHENEVER NOT FOUND DO do_nothing();
	EXEC SQL DELETE FROM entrada
		WHERE id=:id_entrada;
	EXEC SQL COMMIT;
	if (ha_fallado) return;
	
	printf("\nEntrada borrada con éxito.\n");
	esperar_tecla();
}

// ----------------------------
// --- CREAR/EDITAR ENTRADA ---
// ----------------------------

void pedir_datos_entrada(char *titulo, char *texto)
{
	printf("\n");
	printf("Titulo: ");
	fgets(titulo, 45*sizeof(char), stdin);
	fgets(titulo, 45*sizeof(char), stdin);
	printf("Texto: ");
	fgets(texto, 1000*sizeof(char), stdin);
}

void editar_entrada(int id_entrada)
{
	char titulo[45];
	char texto[1000];
	pedir_datos_entrada(titulo, texto);
	
	int ha_fallado = 0;
	EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
	EXEC SQL WHENEVER NOT FOUND DO do_nothing();
	EXEC SQL UPDATE entrada
		SET titulo = :titulo, texto = :texto, numedicion = numedicion + 1,
			fechaedicion = (SELECT sysdate FROM dual)
		WHERE id=:id_entrada;
	EXEC SQL COMMIT;
	if (ha_fallado) return;
	
	printf("\nEntrada editada con éxito.\n");
	esperar_tecla();
}

void crear_entrada(int id_hilo)
{
	char titulo[45];
	char texto[1000];
	pedir_datos_entrada(titulo, texto);
	
	int ha_fallado = 0;
	EXEC SQL WHENEVER SQLERROR DO gestion_error(&ha_fallado);
	EXEC SQL INSERT INTO entrada
		(id, titulo, texto, idhilo, idusuario, fechacreacion)
		VALUES(entrada_seq.NEXTVAL, :titulo, :texto, :id_hilo,
		:id_usuario, (SELECT sysdate FROM dual));
	EXEC SQL COMMIT;
	if (ha_fallado) return;
	
	printf("\nEntrada creada con éxito.\n");
	esperar_tecla();
}

// ------------------------
// --- SQL LOGIN/LOGOUT ---
// ------------------------

void login_bd()
{
	EXEC SQL BEGIN DECLARE SECTION;
		char bd_user [40] = "\"***REMOVED***\"";
		char bd_pass [40] = "***REMOVED***";
	EXEC SQL END DECLARE SECTION;
	EXEC SQL WHENEVER SQLERROR DO gestion_error_sql();
	EXEC SQL CONNECT :bd_user IDENTIFIED BY :bd_pass;
}

void logout_bd()
{
	EXEC SQL COMMIT RELEASE;
}

void gestion_error_sql()
{
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	printf("Falló de autenticación a la base de datos.\n");
	EXEC SQL ROLLBACK WORK RELEASE;
	exit(1);
}

